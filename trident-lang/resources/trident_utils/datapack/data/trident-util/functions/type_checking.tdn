@on compile

local var assertType = function(obj, type) {
    do if(!isInstance(obj, type)) {
        throw "Expected " + type + ", instead got " + typeOf(obj)
    }
}

local var assertObjectType = function(obj, objType) {
    eval assertType(obj, "dictionary")
    do if(obj.objectType() != objType) {
        throw "Expected dictionary of meta type " + objType + ", instead got " + obj.objectType()
    }
}

local var assertDualTypes = function(obj, type0, type1) {
    do if(!isInstance(obj, type0) && !isInstance(obj, type1)) {
        throw "Expected " + type0 + " or " + type1 + ", instead got " + typeOf(obj)
    }
}

local var assertOneOf = function(obj, validTypes) {
    for(valid in validTypes) {
        do if(obj == valid) return
    }
    throw "Got " + obj + ", expected one of the following: " + validTypes
}

local var rangeToObj = function(value) {
    do if(isInstance(value, "int_range") || isInstance(value, "real_range")) {
        var range = value
        eval value = {}
        do if(range.min != null) eval value.min = range.min
        do if(range.max != null) eval value.max = range.max
    }
    return value
}
