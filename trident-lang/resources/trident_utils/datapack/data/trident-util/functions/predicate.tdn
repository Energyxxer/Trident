@on compile
@require trident-util:shared

private var generatedPredicates = {}

define private class Predicate : JSONSerializable
define private class EntityPredicate : Predicate
define private class EntityPropertiesPredicate : EntityPredicate, Entity
define private class EntityScoresPredicate : EntityPredicate
define private class BlockStatePropertyPredicate : Predicate
define private class LocationCheckPredicate : Predicate, Location
define private class WeatherCheckPredicate : Predicate
define private class MatchToolPredicate : Predicate, Shared.Item
define private class DamageSourcePropertiesPredicate : Predicate

define class Predicate : JSONSerializable {
    public var output = {}

    private var isInverted = false

    public new() {}
    public new(startingOutput : dictionary) {
        eval this.output = startingOutput
    }

    public inverted() : Predicate {
        return Predicate.inverted(this)
    }

    public static randomChance(chance : real) : Predicate {
        return new Predicate({
            "condition": "minecraft:random_chance",
            "chance": chance
        })
    }

    public static randomChanceWithLooting(chance : real, lootingMultiplier : real) : Predicate {
        return new Predicate({
            "condition": "minecraft:random_chance_with_looting",
            "chance": chance,
            "looting_multiplier": lootingMultiplier
        })
    }

    public static killedByPlayer() : Predicate {
        return new Predicate({
            "condition": "minecraft:killed_by_player"
        })
    }

    public static timeCheck(value : int_range, period : int?) : Predicate {
        return new Predicate({
            "condition": "minecraft:time_check",
            "value": rangeToObj(value),
            "period": period
        })
    }

    public static timeCheck(min : Number, max : Number, period : int?) : Predicate {
        return new Predicate({
            "condition": "minecraft:time_check",
            "value": {
                    "min": min,
                    "max": max
            },
            "period": period
        })
    }

    public static valueCheck(value : Number, range : Number) : Predicate {
        if(Project.getTargetVersion()[1] < 16) throw "Predicate value_check is only supported for target versions 1.16 and later"
        return new Predicate({
            "condition": "minecraft:value_check",
            "value": value,
            "range": range
        })
    }

    public static valueCheck(value : Number, min : Number, max : Number) : Predicate {
        if(Project.getTargetVersion()[1] < 16) throw "Predicate value_check is only supported for target versions 1.16 and later"
        return new Predicate({
            "condition": "minecraft:value_check",
            "value": value,
            "range": {
                "min": min,
                "max": max
            }
        })
    }

    public static inverted(term : Predicate) : Predicate {
        if(term.isInverted) {
            return term.output.term
        }
        var rv = new Predicate({
            "condition": "minecraft:inverted",
            term: term
        })
        eval rv.isInverted = true
        return rv
    }

    public static entityProperties() : EntityPropertiesPredicate {
        return new EntityPropertiesPredicate()
    }

    public static blockStateProperty() : BlockStatePropertyPredicate {
        if(Project.getTargetVersion()[1] < 16) throw "Predicate block_state_property is only supported for target versions 1.16 and later"
        return new BlockStatePropertyPredicate()
    }

    public static locationCheck() : LocationCheckPredicate {
        return new LocationCheckPredicate()
    }

    public static entityScores() : EntityScoresPredicate {
        return new EntityScoresPredicate()
    }

    public static weatherCheck() : WeatherCheckPredicate {
        return new WeatherCheckPredicate()
    }

    public static matchTool() : MatchToolPredicate {
        if(Project.getTargetVersion()[1] < 16) throw "Predicate match_tool is only supported for target versions 1.16 and later"
        return new MatchToolPredicate()
    }

    public static damageSourceProperties() : DamageSourcePropertiesPredicate {
        return new DamageSourcePropertiesPredicate()
    }

    public static tableBonus(enchantment : resource, chanceTable : list) : Predicate {
        if(!MinecraftTypes.exists("enchantment", enchantment)) throw "Given type '" + enchantment + "' does not exist as an enchantment type"
        for(chance in chanceTable) {
            if(!(chance is int || chance is real)) {
                throw "Expected real in list, instead got " + type_definition.of(chance)
            }
        }
        return new Predicate({
            "condition": "minecraft:table_bonus",
            "enchantment": enchantment,
            "chances": chanceTable
        })
    }

    public static reference(loc : resource) : Predicate {
        return new Predicate({
            "condition": "minecraft:reference",
            "name": loc
        })
    }

    public static survivesExplosion() : Predicate {
        return new Predicate({
            "condition": "minecraft:survives_explosion"
        })
    }

    public static alternative(terms : list) : Predicate {
        for(term in terms) {
            if(!(term is Predicate)) {
                throw "Expected Predicate in list, instead got " + type_definition.of(term)
            }
        }

        var obj = new Predicate({
            "condition": "minecraft:alternative",
            "terms": terms
        })

        return obj
    }

    public export(loc : resource?) : resource {
        if(loc == null) {
            var ns = Reflection.getWritingFile().namespace
            if(generatedPredicates[ns] == null) eval generatedPredicates[ns] = 0
            eval loc = new resource(ns, ["trident-generated", "predicate", (string) generatedPredicates[ns]])
            eval generatedPredicates[ns]++
        }

        var output = JSONSerializable.fullySerialize(this)

        eval File.out.writeData(
            "data/" + loc.namespace + "/predicates/" + loc.body + ".json",
            JSON.stringify(output, true)
        )

        return loc
    }

    public override serializeToJSON() {
        return output
    }
}

define private class EntityPredicate : Predicate {

    local var entity = "this"

    public which(wh : string) : Predicate {
        eval assertOneOf(wh, ["this", "killer", "killer_player", "player"])
        eval entity = wh
        return this
    }

    public override serializeToJSON() {
        return output
    }
}

define private class EntityPropertiesPredicate : EntityPredicate, Entity {

    public override serializeToJSON() {
        return {
            "condition": "minecraft:entity_properties",
            "entity": entity,
            "predicate": output
        }
    }
}

define private class EntityScoresPredicate : EntityPredicate {

    private var scores = null

    public score(objective : string, value : int_range) : Predicate {
        return scoreRaw(objective, rangeToObj(value))
    }

    public score(objective : string, min : int, max : int) : Predicate {
        return scoreRaw(objective, {"min": min, "max": max})
    }

    public score(objective : string, min : int, max : Number) : Predicate {
        return scoreRaw(objective, {"min": min, "max": max})
    }

    public score(objective : string, min : Number, max : int) : Predicate {
        return scoreRaw(objective, {"min": min, "max": max})
    }

    public score(objective : string, min : Number, max : Number) : Predicate {
        return scoreRaw(objective, {"min": min, "max": max})
    }

    private scoreRaw(objective : string, value) : Predicate {
        if(scores == null) eval scores = {}
        eval scores[objective] = value
        return this
    }

    public override serializeToJSON() {
        return {
            "condition": "minecraft:entity_scores",
            "entity": entity,
            "scores": scores
        }
    }
}

define private class BlockStatePropertyPredicate : Predicate {

    private var block : string?
    private var properties : dictionary?

    public override serializeToJSON() {
        return {
            "condition": "minecraft:block_state_property",
            "block": block,
            "properties": properties
        }
    }

    public block(block : block) : BlockStatePropertyPredicate {
        eval this.block = block.blockType
        if(block.blockState != null) eval properties(block.blockState)
        return this
    }

    public block(blockId : string) : BlockStatePropertyPredicate {
        eval this.block = blockId
        return this
    }

    public properties(properties : dictionary) : BlockStatePropertyPredicate {
        if(this.properties == null) eval this.properties = {}
        eval this.properties = this.properties.merge(properties)
        return this
    }
}

define private class LocationCheckPredicate : Predicate, Location {

    private var offsetX : real? = null
    private var offsetY : real? = null
    private var offsetZ : real? = null

    public offsetX(value : real) : Predicate {
        eval this.offsetX = value
        return this
    }

    public offsetY(value : real) : Predicate {
        eval this.offsetY = value
        return this
    }

    public offsetZ(value : real) : Predicate {
        eval this.offsetZ = value
        return this
    }

    public override serializeToJSON() {
        return {
            "condition": "minecraft:location_check",
            "predicate": output,
            "offsetX": offsetX,
            "offsetY": offsetY,
            "offsetZ": offsetZ
        }
    }
}

define private class WeatherCheckPredicate : Predicate {

    private override var output = {
        "condition": "minecraft:weather_check"
    }

    public raining(value : boolean) : Predicate {
        eval this.output.raining = value
        return this
    }

    public thundering(value : boolean) : Predicate {
        eval this.output.thundering = value
        return this
    }

    public override serializeToJSON() {
        return output
    }
}

define private class MatchToolPredicate : Predicate, Shared.Item {

    public override serializeToJSON() {
        return {
            "condition": "minecraft:match_tool",
            "predicate": output
        }
    }
}

define private class DamageSourcePropertiesPredicate : Predicate {

    private override var output = {
        "condition": "minecraft:damage_source_properties"
    }

    public bypassesArmor(value : boolean) : Predicate {
        eval this.output.bypasses_armor = value
        return this
    }

    public bypassesInvulnerability(value : boolean) : Predicate {
        eval this.output.bypasses_invulnerability = value
        return this
    }

    public bypassesMagic(value : boolean) : Predicate {
        eval this.output.bypasses_magic = value
        return this
    }

    public isExplosion(value : boolean) : Predicate {
        eval this.output.is_explosion = value
        return this
    }

    public isFire(value : boolean) : Predicate {
        eval this.output.is_fire = value
        return this
    }

    public isMagic(value : boolean) : Predicate {
        eval this.output.is_magic = value
        return this
    }

    public isProjectile(value : boolean) : Predicate {
        eval this.output.is_projectile = value
        return this
    }

    public isLightning(value : boolean) : Predicate {
        eval this.output.is_lightning = value
        return this
    }

    public sourceEntity(value : Entity) : Predicate {
        eval this.output.source_entity = value
        return this
    }

    public directEntity(value : Entity) : Predicate {
        eval this.output.direct_entity = value
        return this
    }

    public override serializeToJSON() {
        return output
    }
}
