@on compile
@require trident-util:shared

local var generatedPredicates = {}

local var newPredicate = function(obj) {
    eval SelfBuilder(obj)
    eval obj.objectType = function() {return "Predicate"}
    do if(obj.inverted == null) {
        eval obj.inverted = function() {
            return Predicate.inverted(obj)
        }
    }
    eval obj.export = function(loc) {
        do if(loc == null) {
            var ns = Reflection.getWritingFile().namespace
            do if(generatedPredicates[ns] == null) eval generatedPredicates[ns] = 0
            eval loc = new resource(ns, ["trident-generated", (string) generatedPredicates[ns]])
            eval generatedPredicates[ns]++
        }
        eval assertType(loc, "resource")
        
        eval obj._sb_build()
        
        eval File.out.writeData(
            "data/" + loc.namespace + "/predicates/" + loc.body + ".json",
            JSON.stringify(obj, true)
        )
        
        return loc
    }
    return obj
}

local var newEntityPredicate = function(obj) {
    eval newPredicate(obj)
    eval obj.which = function(which) {
        eval assertType(which, "string")
        eval assertOneOf(which, ["this", "killer", "killer_player", "player"])
        eval obj["entity"] = which
        return obj
    }
    return obj
}

var Predicate = {
    randomChance: function(chance) {
        eval assertType(chance, "real")
        return newPredicate({
            "condition": "minecraft:random_chance",
            "chance": chance
        })
    },
    randomChanceWithLooting: function(chance, lootingMultiplier) {
        eval assertType(chance, "real")
        eval assertType(lootingMultiplier, "real")
        return newPredicate({
            "condition": "minecraft:random_chance_with_looting",
            "chance": chance,
            "looting_multiplier": lootingMultiplier
        })
    },
    killedByPlayer: function() {
        return newPredicate({
            "condition": "minecraft:killed_by_player"
        })
    },
    entityProperties: function() {
        var obj = Shared.Entity()
        eval obj["condition"] = "minecraft:entity_properties"
        eval obj.predicate = {}
        eval obj._sb_buildLocation = function() {
            return obj.predicate
        }
        return newEntityPredicate(obj)
    },
    locationCheck: function() {
        var obj = Shared.Location()
        eval obj["condition"] = "minecraft:location_check"
        eval obj.predicate = {}
        eval obj._sb_buildLocation = function(key) {
            do if(key.startsWith("offset")) return obj
            return obj.predicate
        }
        
        eval obj.offsetX = function(value) {
            eval assertType(value, "real")
            eval obj._sb_buildData.offsetX = value
            return obj
        }
        eval obj.offsetY = function(value) {
            eval assertType(value, "real")
            eval obj._sb_buildData.offsetY = value
            return obj
        }
        eval obj.offsetZ = function(value) {
            eval assertType(value, "real")
            eval obj._sb_buildData.offsetZ = value
            return obj
        }
        
        return newPredicate(obj)
    },
    timeCheck: function(value, period) {
        eval assertDualTypes(value, "int", "int_range")
        eval value = rangeToObj(value)
        
        do if(period != null) {
            eval assertType(period, "int")
        }
        return newPredicate({
            "condition": "minecraft:time_check",
            "value": value,
            "period": period
        })
    },
    weatherCheck: function() {
        return newPredicate({
            "condition": "minecraft:weather_check",
            raining: function(bool) {
                eval assertType(bool, "boolean")
                eval this._sb_buildData.raining = bool
                return this
            },
            thundering: function(bool) {
                eval assertType(bool, "boolean")
                eval this._sb_buildData.thundering = bool
                return this
            }
        })
    },
    damageSourceProperties: function() {
        return newPredicate({
            "condition": "minecraft:damage_source_properties",
            predicate: {},
            _sb_buildLocation: function() {
                return this.predicate
            },
            bypassesArmor: function(bool) {
                eval assertType(bool, "boolean")
                eval this._sb_buildData.bypasses_armor = bool
                return this
            },
            bypassesInvulnerability: function(bool) {
                eval assertType(bool, "boolean")
                eval this._sb_buildData.bypasses_invulnerability = bool
                return this
            },
            bypassesMagic: function(bool) {
                eval assertType(bool, "boolean")
                eval this._sb_buildData.bypasses_magic = bool
                return this
            },
            isExplosion: function(bool) {
                eval assertType(bool, "boolean")
                eval this._sb_buildData.is_explosion = bool
                return this
            },
            isFire: function(bool) {
                eval assertType(bool, "boolean")
                eval this._sb_buildData.is_fire = bool
                return this
            },
            isMagic: function(bool) {
                eval assertType(bool, "boolean")
                eval this._sb_buildData.is_magic = bool
                return this
            },
            isProjectile: function(bool) {
                eval assertType(bool, "boolean")
                eval this._sb_buildData.is_projectile = bool
                return this
            },
            isLightning: function(bool) {
                eval assertType(bool, "boolean")
                eval this._sb_buildData.is_lightning = bool
                return this
            },
            sourceEntity: function(enty) {
                eval assertObjectType(enty, "Shared.Entity")
                eval this._sb_buildData.source_entity = enty
                return this
            },
            directEntity: function(enty) {
                eval assertObjectType(enty, "Shared.Entity")
                eval this._sb_buildData.direct_entity = enty
                return this
            }
        })
    },
    tableBonus: function(enchantment, chanceTable) {
        eval assertType(enchantment, "resource")
        do if(!MinecraftTypes.exists("enchantment", enchantment)) throw "Given type '" + enchantment + "' does not exist as an enchantment type"
        eval assertType(chanceTable, "list")
        for(chance in chanceTable) {
            eval assertType(chance, "int")
        }
        return newPredicate({
            "condition": "minecraft:table_bonus",
            "enchantment": enchantment,
            "chances": chanceTable
        })
    },
    entityScores: function() {
        return newEntityPredicate({
            "condition": "minecraft:entity_scores",
            score: function(objective, value) {
                eval assertType(objective, "string")
                eval assertDualTypes(value, "int", "int_range")
                eval value = rangeToObj(value)
                do if(this._sb_buildData.scores == null) eval this._sb_buildData.scores = {}
                eval this._sb_buildData.scores[objective] = value
                return this
            }
        })
    },
    entityPresent: function() {
        return newPredicate({
            "condition": "minecraft:entity_present"
        })
    },
    reference: function(loc) {
        eval assertType(loc, "resource")
        return newPredicate({
            "condition": "minecraft:reference",
            "name": loc
        })
    },
    alternative: function(terms) {
        eval assertType(terms, "list")
        
        var obj = newPredicate({
            "condition": "minecraft:alternative",
            terms: [],
            _sb_build: function() {
                eval this._sb_buildData = null
                for(term in this.terms) {
                    eval term._sb_build()
                }
            }
        })
        
        for(term in terms) {
            eval assertObjectType(term, "Predicate")
            
            eval obj.terms.add(term)
        }
        
        return obj
    },
    inverted: function(term) {
        eval assertObjectType(term, "Predicate")
        
        return newPredicate({
            "condition": "minecraft:inverted",
            term: term,
            inverted: function() {
                return term
            },
            _sb_build: function() {
                eval this._sb_buildData = null
                eval this.term._sb_build()
            }
        })
    }
}
