@on compile
@require trident-util:shared

private var generatedPredicates = {}

define class Predicate : JSONSerializable {
    public var output = {}

    public new() {}
    public new(startingOutput : dictionary) {
        eval this.output = startingOutput
    }

    public inverted() {
        return Predicate.inverted(this)
    }

    public static randomChance(chance : real) {
        return new Predicate({
            "condition": "minecraft:random_chance",
            "chance": chance
        })
    }

    public static randomChanceWithLooting(chance : real, lootingMultiplier : real) {
        return new Predicate({
            "condition": "minecraft:random_chance_with_looting",
            "chance": chance,
            "looting_multiplier": lootingMultiplier
        })
    }

    public static killedByPlayer() {
        return new Predicate({
            "condition": "minecraft:killed_by_player"
        })
    }

    public static timeCheck(value : int, period : int?) {
        return new Predicate({
            "condition": "minecraft:time_check",
            "value": value,
            "period": period
        })
    }
    public static timeCheck(value : int_range, period : int?) {
        return new Predicate({
            "condition": "minecraft:time_check",
            "value": rangeToObj(value),
            "period": period
        })
    }

    public static inverted(term : Predicate) {
        var rv = new Predicate({
            "condition": "minecraft:inverted",
            term: term
        })
        eval rv.inverted = function() {return term}
    }

    public static entityProperties() {
        return new EntityPropertiesPredicate()
    }

    public static locationCheck() {
        return new LocationCheckPredicate()
    }

    public static entityScores() {
        return new EntityScoresPredicate()
    }

    public static weatherCheck() {
        return new WeatherCheckPredicate()
    }

    public static damageSourceProperties() {
        return new DamageSourcePropertiesPredicate()
    }

    public static tableBonus(enchantment : resource, chanceTable : list) {
        if(!MinecraftTypes.exists("enchantment", enchantment)) throw "Given type '" + enchantment + "' does not exist as an enchantment type"
        for(chance in chanceTable) {
            if(!(chance is int || chance is real)) {
                throw "Expected real in list, instead got " + type_definition.of(chance)
            }
        }
        return new Predicate({
            "condition": "minecraft:table_bonus",
            "enchantment": enchantment,
            "chances": chanceTable
        })
    }

    public static reference(loc : resource) {
        return new Predicate({
            "condition": "minecraft:reference",
            "name": loc
        })
    }

    public static alternative(terms : list) {

        for(term in terms) {
            if(!(term is Predicate)) {
                throw "Expected Predicate in list, instead got " + type_definition.of(term)
            }
        }

        var obj = new Predicate({
            "condition": "minecraft:alternative",
            "terms": terms
        })

        return obj
    }

    public export(loc : resource?) {
        if(loc == null) {
            var ns = Reflection.getWritingFile().namespace
            if(generatedPredicates[ns] == null) eval generatedPredicates[ns] = 0
            eval loc = new resource(ns, ["trident-generated", "predicate", (string) generatedPredicates[ns]])
            eval generatedPredicates[ns]++
        }

        var output = JSONSerializable.fullySerialize(this)

        eval File.out.writeData(
            "data/" + loc.namespace + "/predicates/" + loc.body + ".json",
            JSON.stringify(output, true)
        )

        return loc
    }

    public override serializeToJSON() {
        return {}
    }
}

define private class EntityPredicate : Predicate {

    local var entity = "this"

    public which(wh : string) {
        eval assertOneOf(wh, ["this", "killer", "killer_player", "player"])
        eval entity = wh
        return this
    }

    public override serializeToJSON() {
        return output
    }
}

define private class EntityPropertiesPredicate : EntityPredicate, Shared.Entity {

    public override serializeToJSON() {
        return {
            "condition": "minecraft:entity_properties",
            "entity": entity,
            "predicate": output
        }
    }
}

define private class EntityScoresPredicate : EntityPredicate {

    private var scores = null

    public score(objective : string, value : int) {
        return scoreRaw(objective, value)
    }

    public score(objective : string, value : int_range) {
        return scoreRaw(objective, rangeToObj(value))
    }

    private scoreRaw(objective : string, value) {
        if(scores == null) eval scores = {}
        eval scores[objective] = value
        return this
    }

    public override serializeToJSON() {
        return {
            "condition": "minecraft:entity_scores",
            "entity": entity,
            "scores": scores
        }
    }
}

define private class LocationCheckPredicate : Predicate, Shared.Location {

    private var offsetX : real? = null
    private var offsetY : real? = null
    private var offsetZ : real? = null

    public offsetX(value : real) {
        eval this.offsetX = value
        return this
    }

    public offsetY(value : real) {
        eval this.offsetY = value
        return this
    }

    public offsetZ(value : real) {
        eval this.offsetZ = value
        return this
    }

    public override serializeToJSON() {
        return {
            "condition": "minecraft:location_check",
            "predicate": output,
            "offsetX": offsetX,
            "offsetY": offsetY,
            "offsetZ": offsetZ
        }
    }
}

define private class WeatherCheckPredicate : Predicate {

    private override var output = {
        "condition": "minecraft:weather_check"
    }

    public raining(value : boolean) {
        eval this.output.raining = value
        return this
    }

    public thundering(value : boolean) {
        eval this.output.thundering = value
        return this
    }

    public override serializeToJSON() {
        return output
    }
}

define private class DamageSourcePropertiesPredicate : Predicate {

    private override var output = {
        "condition": "minecraft:damage_source_properties"
    }

    public bypassesArmor(value : boolean) {
        eval this.output.bypasses_armor = value
        return this
    }

    public bypassesInvulnerability(value : boolean) {
        eval this.output.bypasses_invulnerability = value
        return this
    }

    public bypassesMagic(value : boolean) {
        eval this.output.bypasses_magic = value
        return this
    }

    public isExplosion(value : boolean) {
        eval this.output.is_explosion = value
        return this
    }

    public isFire(value : boolean) {
        eval this.output.is_fire = value
        return this
    }

    public isMagic(value : boolean) {
        eval this.output.is_magic = value
        return this
    }

    public isProjectile(value : boolean) {
        eval this.output.is_projectile = value
        return this
    }

    public isLightning(value : boolean) {
        eval this.output.is_lightning = value
        return this
    }

    public sourceEntity(value : Shared.Entity) {
        eval this.output.source_entity = value
        return this
    }

    public directEntity(value : Shared.Entity) {
        eval this.output.direct_entity = value
        return this
    }

    public override serializeToJSON() {
        return output
    }
}
